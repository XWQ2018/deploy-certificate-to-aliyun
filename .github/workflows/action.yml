name: Auto Renew and Deploy SSL Certificates

on:
    push:
        branches:
            - main
    schedule:
        - cron: "0 0 20 */2 *" # 每2个月的第二十天执行一次

jobs:
    renew-deploy-cert:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: "3.8"

            # 设置邮箱
            - name: Install acme.sh
              env:
                  EMAIL: ${{ secrets.EMAIL}}
              run: |
                  sudo apt-get update
                  sudo apt-get install -y socat
                  curl https://get.acme.sh | sh -s email="${EMAIL}"

            # 准备acme.sh的证书目录
            # - name: Prepare acme.sh credentials
            #   env:
            #       DOMAINS: ${{ secrets.DOMAINS }}
            #   run: |
            #       mkdir -p ~/.acme.sh
            #       IFS=',' read -r -a domain_array <<< "${DOMAINS}"
            #       for domain in "${domain_array[@]}"; do
            #         mkdir -p ~/certs/${domain}
            #       done

            # # 拉取阿里云证书  -d "${domain}"
            # - name: Obtain SSL Certificates
            #   env:
            #       DOMAINS: ${{ secrets.DOMAINS }}
            #       Ali_Key: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
            #       Ali_Secret: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
            #   run: |
            #       echo "DEBUG: DOMAINS value before processing: '${DOMAINS}'"
            #       IFS=',' read -r -a domain_array <<< "${DOMAINS}"
            #       for domain in "${domain_array[@]}"; do
            #         ~/.acme.sh/acme.sh --set-default-ca --server letsencrypt
            #         ~/.acme.sh/acme.sh --issue --server zerossl --dns dns_ali -d "${domain}" \
            #         --keylength 2048 \
            #         --key-file ~/certs/${domain}/privkey.pem \
            #         --fullchain-file ~/certs/${domain}/fullchain.pem \
            #         --debug 2>&1 | tee acme.log
            #       done

            #       # 3. 验证文件生成
            #       echo "生成的证书文件："
            #       find ~/certs -type f
            #       ls -la ~/certs/*/*

            # 更新证书到阿里云CDN
            - name: Install Python dependencies
              run: pip install -r requirements.txt

            # # - name: Upload certificates to Alibaba Cloud CDN
            # #   env:
            # #       ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
            # #       ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
            # #       # 要设置域名的二级域名，例如要设置*.example.com，这里填写的就是example.com, 多个域名用英文逗号隔开
            # #       DOMAINS: ${{ secrets.DOMAINS }}
            # #       # 设置阿里云cdn域名，一般是三级域名，例如cdn.example.com，需要跟上面的DOMAINS对应，否则会设置错误
            # #       ALIYUN_CDN_DOMAINS: ${{ secrets.ALIYUN_CDN_DOMAINS }}

            # #   run: python upload_certs_to_aliyun.py

            # # 上传阿里云证书
            # - name: Upload certificates
            #   env:
            #       ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
            #       ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
            #       DOMAINS: ${{ secrets.DOMAINS }}
            #       ALIYUN_CDN_DOMAINS: ${{ secrets.ALIYUN_CDN_DOMAINS }}
            #       CDN1: ${{ secrets.CDN1 }}
            #       CDN2: ${{ secrets.CDN2 }}
            #       REQUEST_URL1: ${{ secrets.REQUEST_URL1 }}
            #       REQUEST_URL2: ${{ secrets.REQUEST_URL2 }}

            #   run: |
            #       cat << 'EOF' > update_sslcert_api.py
            #       import os
            #       import json
            #       from aliyunsdkcore.client import AcsClient
            #       from aliyunsdkcore.acs_exception.exceptions import ServerException
            #       from aliyunsdkcore.acs_exception.exceptions import ClientException
            #       from aliyunsdkcert.request.v20200430 import ImportCertificateRequest
            #       # from aliyunsdkslb.request.v20140515 import UploadServerCertificateRequest, SetLoadBalancerHTTPSListenerAttributeRequest

            #       # 获取配置
            #       def get_env_var(key):
            #         value = os.getenv(key)
            #         if not value:
            #             raise EnvironmentError(f"Environment variable {key} not set")
            #         return value
            #       # 判空
            #       def file_exists_and_not_empty(file_path):
            #         expanded_path = os.path.expanduser(file_path)
            #         return os.path.isfile(expanded_path) and os.path.getsize(expanded_path) > 0

            #         # 设置证书
            #       def set_certificate():
            #         # 初始化 AcsClient
            #         client = AcsClient(get_env_var('ALIYUN_ACCESS_KEY_ID'), get_env_var('ALIYUN_ACCESS_KEY_SECRET'), 'cn-hangzhou')

            #         domains = get_env_var('DOMAINS').split(',')

            #         for domainName in domains:
            #             # 读取证书和私钥文件
            #             cert_content = f"~/certs/{domainName}/fullchain.pem"
            #             key_content = f"~/certs/{domainName}/privkey.pem"

            #             # cdn1获取证书内容
            #             expanded_cert_path = os.path.expanduser(cert_content)
            #             expanded_key_path = os.path.expanduser(key_content)

            #             if not file_exists_and_not_empty(expanded_cert_path) or not file_exists_and_not_empty(expanded_key_path):
            #                 raise FileNotFoundError(f"Certificate or key file for domain {domainName} is missing or empty")

            #             with open(expanded_cert_path, 'r') as f:
            #                 cert_pem = f.read()

            #             with open(expanded_key_path, 'r') as f:
            #                 key_pem = f.read()

            #             # 创建 ImportCertificateRequest 对象
            #             request = ImportCertificateRequest.ImportCertificateRequest()

            #             # 设置证书内容
            #             request.set_Certificate(cert_pem)

            #             # 设置私钥内容
            #             request.set_PrivateKey(key_pem)

            #             # 设置证书名称
            #             request.set_Name(f"{domainName}-cert")

            #             # 设置证书描述
            #             request.set_Description("Certificate for domain: "+ domainName)

            #             # 设置证书类型
            #             request.set_CertificateType("SERVER")

            #             # 发送请求并获取响应
            #             response = client.do_action_with_exception(request)

            #             # 解析响应
            #             response_json = json.loads(response.decode('utf-8'))

            #             # 获取证书 ID
            #             certificate_id = response_json.get('CertificateId')

            #             print(f"证书已更新: {domainName}")
            #             print(f"证书ID: {certificate_id}")

            #             # 设置请求参数
            #             # request = UploadServerCertificateRequest.UploadServerCertificateRequest()
            #             # request.set_ServerCertificate(cert_pem)
            #             # request.set_PrivateKey(key_pem)
            #             # request.set_ServerCertificateName(f"{domainName}-cert")
            #             # cert_id = json.loads(client.do_action_with_exception(request).decode())['ServerCertificateId']

            #             # 绑定到监听器
            #             # bind_req = SetLoadBalancerHTTPSListenerAttributeRequest()
            #             # bind_req.set_LoadBalancerId(lb_id)
            #             # bind_req.set_ListenerPort(443)
            #             # bind_req.set_ServerCertificateId(cert_id)
            #             # client.do_action_with_exception(bind_req)

            #       if __name__ == '__main__':
            #         set_certificate()

            #       EOF

            #       # 查看证书路径
            #       find ~/certs -type f

            #       # 再执行脚本
            #       python update_sslcert_api.py

            # 更新证书到 Unicloud API
            - name: update cert to unicloud API with Python
              env:
                  ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
                  ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
                  DOMAINS: ${{ secrets.DOMAINS }}
                  ALIYUN_CDN_DOMAINS: ${{ secrets.ALIYUN_CDN_DOMAINS }}
                  CDN1: ${{ secrets.CDN1 }}
                  CDN2: ${{ secrets.CDN2 }}
                  REQUEST_URL1: ${{ secrets.REQUEST_URL1 }}
                  REQUEST_URL2: ${{ secrets.REQUEST_URL2 }}

              run: |
                  cat << 'EOF' > update_cert_api.py
                  import requests
                  import os

                  def get_env_var(key):
                    value = os.getenv(key)
                    if not value:
                        raise EnvironmentError(f"Environment variable {key} not set")
                    return value

                  def file_exists_and_not_empty(file_path):
                    expanded_path = os.path.expanduser(file_path)
                    return os.path.isfile(expanded_path) and os.path.getsize(expanded_path) > 0

                  def requestUnicloudApi():
                    print("::group::调试信息")

                    # cert_path1 = f"~/certs/{get_env_var('CDN1')}/fullchain.pem"
                    # key_path1 = f"~/certs/{get_env_var('CDN1')}/privkey.pem"

                    # # cdn1获取证书内容
                    # expanded_cert_path1 = os.path.expanduser(cert_path1)
                    # expanded_key_path1 = os.path.expanduser(key_path1)

                    # if not file_exists_and_not_empty(expanded_cert_path1) or not file_exists_and_not_empty(expanded_key_path1):
                    #     raise FileNotFoundError(f"Certificate or key file for domain {domain_name} is missing or empty")
                    
                    # with open(expanded_cert_path1, 'r') as f:
                    #     cert1 = f.read()

                    # with open(expanded_key_path1, 'r') as f:
                    #     key1 = f.read()
                    
                    # cert_path2 = f"~/certs/{get_env_var('CDN2')}/fullchain.pem"
                    # key_path2 = f"~/certs/{get_env_var('CDN2')}/privkey.pem"
                    
                    # # cdn2获取证书内容
                    # expanded_cert_path2 = os.path.expanduser(cert_path2)
                    # expanded_key_path2 = os.path.expanduser(key_path2)

                    # if not file_exists_and_not_empty(expanded_cert_path2) or not file_exists_and_not_empty(expanded_key_path2):
                    #     raise FileNotFoundError(f"Certificate or key file for domain {domain_name} is missing or empty")
                    
                    # with open(expanded_cert_path2, 'r') as f:
                    #     cert2 = f.read()

                    # with open(expanded_key_path2, 'r') as f:
                    #     key2 = f.read()

                    url = get_env_var('REQUEST_URL1')
                    url2= get_env_var('REQUEST_URL2')

                    headers = {
                        "Accept": "*/*",
                        "User-Agent": "GitHub-Actions",
                        "Content-Type": "mutipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW"
                    }

                    params1 = {
                        "cert_content": "cert1",  # 证书内容
                        "key_content": "key1"       # 私匙内容
                    }

                    params2 = {
                        "cert_content": "cert2",  # 证书内容
                        "key_content": "key2"       # 私匙内容
                    }

                    try:
                        # 更新cdn1证书
                        response = requests.get(url, params=params1, headers=headers, timeout=60)
                        response.raise_for_status()  # 非2xx状态码抛出异常
                        print(f"连接成功！状态码: {response.status_code}")
                        print(response.json())

                        # 更新cdn2证书
                        response = requests.get(url2, params=params2, headers=headers, timeout=60)
                        response.raise_for_status()  # 非2xx状态码抛出异常
                        print(f"连接成功！状态码: {response.status_code}")
                        print(response.json())
                    except Exception as e:
                        print(f"连接失败: {str(e)}")
                        raise  # 使步骤失败
                    finally:
                        print("::endgroup::")

                  if __name__ == "__main__":
                        requestUnicloudApi()
                  EOF

                  find ~/certs -type f

                  # 先安装requests库
                  pip install requests

                  # 再执行脚本
                  python update_cert_api.py

            - name: Clean up
              env:
                  DOMAINS: ${{ secrets.DOMAINS }}
              run: |
                  IFS=',' read -r -a domain_array <<< "${DOMAINS}"
                  for domain in "${domain_array[@]}"; do
                    rm -rf ~/certs/${domain}
                  done
